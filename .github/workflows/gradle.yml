# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
    
    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    ## create application-dev.properties
    - name: make application-dev.properties
      if: contains(github.ref, 'develop') # develop branch일때 spring의 resources 경로로 이동후 application-dev.properties 파일 생성, GitHub-Actions에서 설정한 값을 application-dev.properties 파일에 쓰기
      run: |
        cd ./src/main/resources
        touch ./application-dev.properties
        echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.properties
      shell: bash

    ## create application-prd.properties
    - name: make application-prd.properties
      if: contains(github.ref, 'main') # main branch일때
      run: |
          cd ./src/main/resources
          touch ./application-prd.properties
          echo "${{ secrets.PROPERTIES_PRD }}" > ./application-prd.properties
      shell: bash
      
    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build -x test
      
      
    ## docker build & push to production
    - name: Docker build & push to prd
      if: contains(github.ref, 'main')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prd -t ${{ secrets.DOCKER_REPO }}/cicd-prd .
          docker push ${{ secrets.DOCKER_REPO }}/cicd-prd

    ## docker build & push to develop
    - name: Docker build & push to dev
      if: contains(github.ref, 'develop')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_REPO }}/cicd-dev .
          docker push ${{ secrets.DOCKER_REPO }}/cicd-dev

    ## deploy to production
    - name: Deploy to prd
      uses: appleboy/ssh-action@master
      id: deploy-prd
      if: contains(github.ref, 'main')
      with:
          host: ${{ secrets.HOST_PRD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPO }}/cicd-prd
              docker-compose up -d
              docker image prune -f

    ## deploy to develop
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'develop')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 22
        #key: ${{ secrets.PRIVATE_KEY }}
        script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/cicd-dev
            docker-compose up -d
            docker image prune -f
            
    ## time
  current-time:
      needs: CI-CD
      runs-on: ubuntu-latest
      steps:
        - name: Get Current Time
          uses: 1466587594/get-current-time@v2
          id: current-time
          with:
            format: YYYY-MM-DDTHH:mm:ss
            utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

        - name: Print Current Time
          run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
          shell: bash
